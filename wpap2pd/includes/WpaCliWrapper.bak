#pragma once

#include <cotask/CoExec.h>
#include <cotask/CoEvent.h>
#include <cotask/Log.h>
#include "WpaEvent.h"
#include <functional>


namespace p2p {
    using namespace ::cotask;

    class WpaCliWrapper  {
        using base = CoExec;
    public:
        [[nodiscard ]] CoTask<> Run(int argc, const char*const*argv);

        ILog&Log() { return *pLog; }

    protected:
        enum class Source {
            P2p,
            Wlan
        };
        virtual CoTask<> CoOnInit() { co_return; }
        virtual void Init() { return; }
        virtual void OnEvent(Source source,WpaEvent &event) { return;}
        virtual void Terminate();
    private:
        std::string p2pInterfaceName = "p2p-dev-wlan0";
        std::string wlanInterfaceName = "wlan0";

        CoFile p2pSocket;
        CoFile wlanSocket;

        ILog *pLog = new ConsoleLog();

        bool traceMessages = true;

        CoTask<> ReadP2pMessages(std::function<void(void)> onClosed);
        CoTask<> ReadWlanMessages(std::function<void(void)> onClosed);
        CoTask<std::vector<std::string>> ReadToPrompt(std::chrono::milliseconds timeout);


        bool lineBufferRecoveringFromTimeout = false;
        int lineBufferHead = 0;
        int lineBufferTail = 0;
        char lineBuffer[512];
        bool lineResultEmpty = true;
        std::stringstream lineResult;

        bool prompting_;
        CoConditionVariable cvPrompting;

        void NotifyPrompting() {
            cvPrompting.Notify([this]() { prompting_ = true;});
        }
        CoTask<> WaitForPrompt(std::chrono::milliseconds timeout) {
            co_await cvPrompting.Wait([this] () {
                if (prompting_)
                {
                    prompting_ = false;
                    return true;
                }
                return false;
            });
            co_return;
        }



    };
}// namespace